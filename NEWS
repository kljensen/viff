
NEWS file for VIFF
==================

This file summarizes the changes between each release. Many more
details can be found in the commit messages:

  http://hg.viff.dk/viff/log/

The issue numbers referenced below refer to the online issue tracker,
please refer to it for details on the issues:

  http://tracker.viff.dk/


Version ?, not yet released
---------------------------

The Runtime class has been split into several parts and two new mixin
classes provide different comparison protocols. Several coercion
problems were fixed. The Runtime.callback method was renamed to
Runtime.schedule_callback.

Details:

* Issue 2: Split Runtime class into smaller parts.

* Issue 7: New system for unit tests.

* Better coercion. The comparison in Toft07Runtime can now correctly
  deal with arguments of mixed types, e.g., comparisons like "100 < x"
  where x is a Share.

* The coercion done by the xor method was also fixed.

* Issue 22: Allow sending data several times in one method.


Version 0.4, released on 2008-03-12
-----------------------------------

Implemented a reliable Bracha broadcast which is secure against active
adversaries. Shamir sharings, pseudo-random as well as standard, can
now be asymmetric which means that only a subset of the parties
provide input. The open protocol is now also asymmetric, in the sense
that only a subset of the parties receive the opened result. The
behavior of field elements in Boolean expressions has been fixed. This
means that "GF256(0) and GF256(1)" now returns GF256(0) instead of
GF256(1). Added a modern implementation of the classic Yao
millionaires example from 1982 which started this field of research.

Details:

* Bracha broadcast, which is a reliable broadcast mechanism against
  active adversaries, has been implemented. Secure broadcast is a
  building block that is often used in active security scenarios.

* Asymmetric Shamir sharing. It is now possible to specify that just a
  subset of the players should provide input to a Shamir sharing. This
  change is not backwards compatible with version 0.3 or earlier.
  Adapting old programs is easy, simply change:

    a, b, c = rt.shamir_share(Zp(input))

  to

    a, b, c = rt.shamir_share([1, 2, 3], Zp, input)

  where Zp is a field and rt is a Runtime.

* Asymmetric pseudo-random secret sharing. As the asymmetric Shamir
  sharing above, this is not backwards compatible. This can be fixed
  by changing statements such as e.g.

    a, b, c = rt.prss_share(Zp(input))

  to

    a, b, c = rt.prss_share([1, 2, 3], Zp, input)

  where Zp is a field and rt is a Runtime.

* Asymmetric open protocol, meaning that it is now possible to specify
  that only a subset of the players should receive the opened secret.
  This change is not backwards compatible in cases, where threshold is
  explicitly passed as a parameter. To correct this, name the
  threshold parameter, e.g. change

    result = rt.open(sharing, rt.threshold * 2)

  to

    result = rt.open(sharing, threshold=rt.threshold * 2)

* Overloaded exclusive-or operations on Share instances. Given two
  shares a and b, one can now do

    c = a ^ b

  to obtain the exclusive-or. This works for both GF256 shares and Zp
  shares, though the two types must not be mixed.


Version 0.3, released on 2007-12-27
-----------------------------------

Secure communication between the players were implemented using TLS.
An included Makefile can generate the needed certificates. The network
layer was completely reimplemented, this breaks compatibility with
programs written for VIFF version 0.2 or earlier.


Version 0.2, released on 2007-11-14
-----------------------------------

Implemented overloaded arithmetic operators, so 'w = x + y * z' now
adds and multiplies the three shares as expected. Updated API
documentation. Released using a Distutils setup.py script.


Version 0.1.1, released on 2007-10-23
-------------------------------------

Added API documentation and updated the installation instructions.


Version 0.1, released on 2007-10-16
-----------------------------------

First public release.

Implements basic functionality including addition, multiplication,
exclusive-or, and comparison of shares. Shares can be made using
Shamir sharing or PRSS.

Includes a suite of unit tests and example programs.
